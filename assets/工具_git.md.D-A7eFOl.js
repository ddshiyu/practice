import{_ as i,c as a,o as s,aq as t}from"./chunks/framework.Dy63JtQX.js";const u=JSON.parse('{"title":"git相关操作与配置","description":"","frontmatter":{},"headers":[],"relativePath":"工具/git.md","filePath":"工具/git.md","lastUpdated":1739759111000}'),e={name:"工具/git.md"},l=t(`<h1 id="git相关操作与配置" tabindex="-1">git相关操作与配置 <a class="header-anchor" href="#git相关操作与配置" aria-label="Permalink to &quot;git相关操作与配置&quot;">​</a></h1><h2 id="一、初始化" tabindex="-1">一、初始化 <a class="header-anchor" href="#一、初始化" aria-label="Permalink to &quot;一、初始化&quot;">​</a></h2><h3 id="_1-1、查看配置" tabindex="-1">1.1、查看配置 <a class="header-anchor" href="#_1-1、查看配置" aria-label="Permalink to &quot;1.1、查看配置&quot;">​</a></h3><p>git config user.name git config user.email</p><h3 id="_1-2、设置配置" tabindex="-1">1.2、设置配置 <a class="header-anchor" href="#_1-2、设置配置" aria-label="Permalink to &quot;1.2、设置配置&quot;">​</a></h3><p>git config --global user.name &quot;xxx&quot; git config --global user.email &quot;xxx&quot;</p><h2 id="二、添加公钥" tabindex="-1">二、添加公钥 <a class="header-anchor" href="#二、添加公钥" aria-label="Permalink to &quot;二、添加公钥&quot;">​</a></h2><p>首先输入代码生成ssh key</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xxxxx@xxxxx.com（你的邮箱）&quot;</span></span></code></pre></div><p>windows文件夹：C:\\Users\\dong.ssh mac文件夹：~/.ssh/id_rsa.pub 然后复制该文件内容粘贴到github-setting-ssh and gps keys中添加公钥</p><h2 id="三、提交规范" tabindex="-1">三、提交规范 <a class="header-anchor" href="#三、提交规范" aria-label="Permalink to &quot;三、提交规范&quot;">​</a></h2><ul><li>type: commit 的类型</li><li>feat: 新特性</li><li>fix: 修改问题</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是 css 修改</li><li>test: 测试用例修改</li><li>chore: 其他修改, 比如构建流程, 依赖管理.</li><li>scope: commit 影响的范围, 比如: route, component, utils, build...</li><li>subject: commit 的概述, 建议符合 50/72 formatting</li><li>body: commit 具体修改内容, 可以分为多行, 建议符合 50/72 formatting</li><li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接</li></ul><h2 id="四、远程" tabindex="-1">四、远程 <a class="header-anchor" href="#四、远程" aria-label="Permalink to &quot;四、远程&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v 查看远程仓库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url origin [url] 修改设置远程仓库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote rm origin    删除远程仓库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote add origin [url]    添加远程仓库</span></span></code></pre></div>`,14),n=[l];function o(h,r,p,d,c,g){return s(),a("div",null,n)}const m=i(e,[["render",o]]);export{u as __pageData,m as default};
